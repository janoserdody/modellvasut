p#include <Servo.h>

Servo myservo;  // create servo object to control a servo
// twelve servo objects can be created on most boards


// szervó változók pozíció
int maxPos = 19;
int pos = 0;    // variable to store the servo position

const int nincsValtozas = 15;
const int utvegeVarakozas = 10;
int utvegeVisszaszamlalas = utvegeVarakozas;
const uint8_t maxSpeed = 150;
const uint8_t slowSpeed = 70; 
const uint8_t startSpeed = 60;
const uint8_t expMax = 7;
const uint8_t expMin = 1;
const uint8_t range = maxSpeed - slowSpeed;
const float e = 2.71;
const uint8_t nevezo = 2;
// 1 = első szakasz, 2 = második szakasz, 3 = harmadik szakasz, 0 = nyugalmi helyzet
// melyik pin vezérli az adott szakaszt
uint8_t palyaPin[4][2] = {
  {0,0},{3,5},{6,9},{10,11}
  };
const uint8_t elore = 0;
const uint8_t hatra = 1;

const int szervoPin = 9;
const int relePin = 7;
const int palya1Elore = 3;   //5
const int palya1Iranyvaltas = 13;  //13
const int palya2Elore = 6;   //6 
const int palya2Hatra = 11;  //11
const int palya3Elore = 12;   //10
const int palya3Hatra = 5;    //9
const int szenzorPinA = 0;
const int szenzorPinB = 8;
const int szenzorPinC = 2;
const int szenzorPinD = 4;

const uint8_t trainDelay = 30;
const uint8_t szenzorA = 16; // 5. bit = 1
const uint8_t szenzorB = 17; // 5. bit = 1
const uint8_t szenzorC = 18; // 5. bit = 1
const uint8_t szenzorD = 19; // 5. bit = 1
const uint8_t utVege = 20; // 5. bit = 1
const int valtoNyit = 21; // 5. bit = 1
const int valtoZar = 22; // 5. bit = 1

const uint8_t utElore = 0;
const uint8_t utHatra = 128;
const int iranyvaltas = 256;
const int lassit = 512;
const int gyorsit = 1024; // 128 + 256 + 512 + 1024 + 2048 = 3968
const int all = 2048;
const int iranyMaszk = 3968;
uint8_t routeIndex = 0;
uint8_t kovetkezoSzenzor = 0;
uint8_t valtoAllitas = 0;

int szenzorAllapotA = 0;
int szenzorAllapotB = 0;
int szenzorAllapotC = 0;
int szenzorAllapotD = 0;
int utAllapot1 = 0;
int utAllapot2 = 0;
int utAllapot3 = 0;
int utIrany[3] = {elore, elore, elore};

// első index: hanyadik lépést tette meg az úton
//második index: milyen utasításokat kell tenni az adott lépésben
//melyik szakaszok kapjanak áramot: 1-es, 2-es, 3-as szakasz, 0 = utasitasok vége
// ha eléri a megadott szenzort, átlép a következő lépésre az úton
int  route[8][8] = {
  {(1 | gyorsit), (2 | gyorsit), valtoZar, szenzorA, 0},
  {(1 | gyorsit), (2 | gyorsit), szenzorB, valtoZar, 0},
  {(2 | iranyvaltas),  valtoNyit, szenzorC, 0},
  {(2 | utHatra), (3 | gyorsit | utHatra),  (1 | utHatra), valtoZar, szenzorA, 0},
  {(1 | lassit | utHatra), (3 | utHatra), (2 | utHatra), valtoNyit, szenzorC, 0},
  {(3 | utHatra), (2 | utHatra), (1 | all ), valtoNyit, szenzorD, 0},
  {(3 | lassit | utHatra), (1 | all ), utVege, 0}
  };

int expAccelerate[3] = {expMin, expMin, expMin};
int speed[3] = {startSpeed, startSpeed, startSpeed};    // how fast the train
int increment = 1; // how many points to increment the trainPin by
int vonatDelay = 0;

// the setup routine runs once when you press reset:
void setup() {
  // just for testing Serial.begin(9600);
  Serial.begin(9600);
  
  pinMode(palya1Elore, OUTPUT);
  pinMode(palya1Iranyvaltas, OUTPUT);
  pinMode(palya2Elore, OUTPUT);
  pinMode(palya2Hatra, OUTPUT);
  pinMode(palya3Elore, OUTPUT);
  pinMode(palya3Hatra, OUTPUT);
  pinMode(szenzorPinA, INPUT);
  pinMode(szenzorPinB, INPUT);
  pinMode(szenzorPinC, INPUT);
  pinMode(szenzorPinD, INPUT);
  pinMode(relePin, OUTPUT);
  digitalWrite(relePin, HIGH);
  pos = 0;
  myservo.write(pos);
  valtoAllitas = valtoNyit;
  ValtoInicializalas();
  myservo.attach(szervoPin);  // attaches the servo on pin 13 to the servo object
  // indulás előtt vár 5 mp-et
  delay(5000);
}

// the loop routine runs over and over again forever:
void loop() {
ReadSensors();

if (kovetkezoSzenzor == 0){
  
    NextStep();
  }
  else if (kovetkezoSzenzor == utVege && utvegeVisszaszamlalas == 0){
    kovetkezoSzenzor = 0;
    utvegeVisszaszamlalas = utvegeVarakozas;
    routeIndex = 0;
    inicializalas();
    }
  else if (kovetkezoSzenzor == utVege){
    utvegeVisszaszamlalas--;
    }
  else if(ElerteKovetkezoSzenzort()){
    NextStep();
    }

Iranyvaltas(1, palya2Elore, palya2Hatra, utAllapot2);
Iranyvaltas(2, palya3Elore, palya3Hatra, utAllapot3);

vonatDelay = 0;

// beállítja adott útszakasz sebességét
// 1-es út 0-ás indexszel
utBeallitasRelevel(0, palya1Elore, palya1Iranyvaltas, utAllapot1);
// 2-es út 0-ás indexszel
utBeallitas(1, palya2Elore, palya2Hatra, utAllapot2);
// 3-as út 0-ás indexszel
utBeallitas(2, palya3Elore, palya3Hatra, utAllapot3);

if (valtoAllitas > 0){
  AtallitjaValtot();
  }
  
delay(20 + vonatDelay);
}

void AtallitjaValtot(){
  
  if (valtoAllitas == valtoZar){
  if (pos < maxPos){
    pos++;
    myservo.write(pos);
    }
  }
  else {
      if (pos > 0){
        pos--;
        myservo.write(pos);
        }
    }

  if (pos == maxPos / 2){
      ValtoPolaritasValtas();
    }
}

void ValtoPolaritasValtas(){
  if (valtoAllitas == valtoZar){
     digitalWrite(relePin, HIGH);
    }
    else {
      digitalWrite(relePin, LOW);
      }
  }

void Iranyvaltas(int ut, int utPinElore, int utPinHatra, int allapot){
     // irányváltás??
  if (bitRead(allapot, 8) == 0){
    return;}

  // gyorsít ??
  if (bitRead(utIrany[ut], 10) == 1){
    increment = 2;
    int x = bitRead(allapot, 7) == 0 ? 1 : 0;
    bitWrite(allapot, 7, x);
    }
    else {
    increment = -2;  
      }
    
    if (GyorsitLassit(ut)){
      utIrany[ut] = bitSet(utIrany[ut], 10);
      }

      if (bitRead(allapot, 7) == 0){
        analogWrite(utPinElore, speed[ut]);
        analogWrite(utPinHatra, 0);
        }
    else {
      analogWrite(utPinHatra, speed[ut]);
      analogWrite(utPinElore, 0);
      }
  }

void utBeallitas(int ut, int utPinElore, int utPinHatra, int allapot){
  if (allapot == nincsValtozas){
    return; // nem változik semmi se
    }   
       // irányváltás?
  if (bitRead(allapot, 8) == 1){
    return;}
    
increment = 0;
    // stop?
if (bitRead(allapot, 11) == 1){
  analogWrite(utPinElore, 0);
  analogWrite(utPinHatra, 0);
  return;
  }
  
  // lassít?
  if (bitRead(allapot, 9) == 1){
    increment = -2;
    GyorsitLassit(ut);
    }
  // gyorsít?
  else if (bitRead(allapot, 10) == 1){
    increment = 1;
    GyorsitLassit(ut);
    }
    // fullSpeed
    else if (bitRead(allapot, 9) == 0 && bitRead(allapot, 10) == 0 ){ 
    speed[ut] = maxSpeed;
    }
  
if (bitRead(allapot, 7) == 0){
    analogWrite(utPinElore, speed[ut]);
    analogWrite(utPinHatra, 0);
    utIrany[ut] = elore;
    }
    else {
      analogWrite(utPinHatra, speed[ut]);
      analogWrite(utPinElore, 0);
      utIrany[ut] = hatra;
      }
  }

void utBeallitasRelevel(int ut, int utPinElore, int PinReleIranyvalto, int allapot){
  if (allapot == nincsValtozas){
    return; // nem változik semmi se
    }   
       // irányváltás?
  if (bitRead(allapot, 8) == 1){
    return;}
    
increment = 0;
    // stop?
if (bitRead(allapot, 11) == 1){
  analogWrite(utPinElore, 0);
  return;
  }
  
  // lassít?
  if (bitRead(allapot, 9) == 1){
    increment = -2;
    GyorsitLassit(ut);
    }
  // gyorsít?
  else if (bitRead(allapot, 10) == 1){
    increment = 1;
    GyorsitLassit(ut);
    }
    // fullSpeed
    else if (bitRead(allapot, 9) == 0 && bitRead(allapot, 10) == 0 ){ 
    speed[ut] = maxSpeed;
    }
  
if (bitRead(allapot, 7) == 0){
    analogWrite(utPinElore, speed[ut]);
    digitalWrite(PinReleIranyvalto, HIGH);
    utIrany[ut] = elore;
    }
    else {
      analogWrite(utPinElore, speed[ut]);
      analogWrite(PinReleIranyvalto, LOW);
      utIrany[ut] = hatra;
      }
  }


bool ElerteKovetkezoSzenzort(){
  /// 3: ha 3 a szenzor értéke, az a high érték (a ki bekapcsolás megelőzése miatt, ha 3x30 ms-ig jelez a szenzor, akkor biztosan magas az értéke)
  if (szenzorAllapotA == 1 && kovetkezoSzenzor == szenzorA) {
    return true;}
  if (szenzorAllapotB == 1 && kovetkezoSzenzor == szenzorB) {
    return true;}
  if (szenzorAllapotC == 1 && kovetkezoSzenzor == szenzorC) {
    return true;}
  if (szenzorAllapotD == 1 && kovetkezoSzenzor == szenzorD) {
    return true;}
  return false;
  }

void NextStep(){
  int i = 0;
  valtoAllitas = 0;
  utAllapot1 = nincsValtozas;
  utAllapot2 = nincsValtozas;
  utAllapot3 = nincsValtozas;
  vonatDelay = 0;
  int y = 0;
  
  while(route[routeIndex][i] != 0){
    int x = route[routeIndex][i];
    
    switch (x){
      case szenzorA:
      kovetkezoSzenzor = x;
         break;
      case szenzorB:
      kovetkezoSzenzor = x;
         break;
      case szenzorC:
      kovetkezoSzenzor = x;
         break;
      case szenzorD:
      kovetkezoSzenzor = x;
         break;
      case utVege:
         kovetkezoSzenzor = x;
         break;
      case valtoNyit:
      valtoAllitas =  x;
      break;
      case valtoZar:
         valtoAllitas =  x;  
         break;
      default:
      break;
      }
      y = x & 15;
      // van e 16 vagy e feletti értékű utasítás
      if ((x & 16) == 0){
        switch (y){
          case 1: 
          utAllapot1 = x;
          break;
          case 2:
          utAllapot2 = x;
          break;
          case 3:
             utAllapot3 = x;
             break;
             default:
             break;
          }
      }
    i++;
    }
    routeIndex++;
}

bool GyorsitLassit(int utIndex){
   // exponenciális függvény a motor karakterisztikának javítására, mert exponenciálisan gyorsult, ezért ennek az inverzével egyenlítettem ki
  int add = pow(e, expAccelerate[utIndex] / nevezo);

  if (increment > 0)
  {
    vonatDelay = add*10 > vonatDelay ? add*10 : vonatDelay;
  }
  else
  {
    //vonatDelay = 10 > vonatDelay ? 10 : vonatDelay;
    vonatDelay = 3;
  }

  if ( increment > 0 && speed[utIndex] > expAccelerate[utIndex] * range / expMax + slowSpeed) 
  {
    expAccelerate[utIndex]++; 
  }

  // change the speed for next time through the loop:
  speed[utIndex] = speed[utIndex] + increment;

  if (increment > 0 && speed[utIndex] < startSpeed)
  {
    speed[utIndex] = startSpeed;
    }

if (speed[utIndex] < startSpeed){
  speed[utIndex] = 0;
  }

 // reverse the direction of the fading at the ends of the fade:
  if (increment < 0 && speed[utIndex] < startSpeed){
    return true; // vége a gyorsításnak / lassításnak
  }
  if (speed[utIndex] > maxSpeed){
    speed[utIndex] = maxSpeed;
    }
  return false;
  }

void ReadSensors(){
  
      szenzorAllapotA = ReadOneSensor(szenzorPinA, szenzorAllapotA);
      szenzorAllapotB = ReadOneSensor(szenzorPinB, szenzorAllapotB);
      szenzorAllapotC = ReadOneSensor(szenzorPinC, szenzorAllapotC);
      szenzorAllapotD = ReadOneSensor(szenzorPinD, szenzorAllapotD);
}
  
int ReadOneSensor(int pin, int allapot){
  // ha a szenzor jelez, akkor nulllára húzza a pint
  if (digitalRead(pin) == LOW){
      allapot += allapot < 1 ? 1 : 0;
    }
    else {
      allapot -= allapot > 0 ? 1 : 0;
      }
      
   return allapot;
}

void ValtoInicializalas(){
  for (int i = 0; i < maxPos; i++)
  {
    delay(50);
    
  if (valtoAllitas == valtoZar){
    if (pos < maxPos){
    pos++;
    myservo.write(pos);
    }
  }
  else {
      if (pos > 0){
    pos--;
    myservo.write(pos);
    }
    }

  if (pos == maxPos / 2){
    ValtoPolaritasValtas();
    }
  }
}

// for debugging
void Print(String text){
  Serial.println(text);
  //delay(1000);
  }


void PrintNumber(int number){
  Serial.println(number);
  //delay(20);
  }

void inicializalas(){
  ValtoInicializalas();
 kovetkezoSzenzor = 0;
 valtoAllitas = 0;
 szenzorAllapotA = 0;
 szenzorAllapotB = 0;
 szenzorAllapotC = 0;
 szenzorAllapotD = 0;
 utAllapot1 = 0;
 utAllapot2 = 0;
 utAllapot3 = 0;
 utIrany[0] = elore;
utIrany[1] = elore;
utIrany[2] = elore;
expAccelerate[0] = expMin;
expAccelerate[1] = expMin;
expAccelerate[2] = expMin;
speed[0] = startSpeed;
speed[1] = startSpeed;
speed[2] = startSpeed; // how fast the train
increment = 1; // how many points to increment the trainPin by
vonatDelay = 0;
analogWrite(palya2Elore,0);
analogWrite(palya2Hatra,0);
analogWrite(palya3Hatra,0);
analogWrite(palya1Elore,0);
  }